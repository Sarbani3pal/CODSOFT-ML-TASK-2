# -*- coding: utf-8 -*-
"""creditcardfrauddetection1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llDG9_i4EkyquIEKidz9dH3Qkqa9qwGv

## **Import** **modules**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

"""# Loading the dataset"""

df = pd.read_csv('creditcard.csv')
df.head()

# statistical info
df.describe()

#datatype info
df.info()

"""# Preprocessing the dataset"""

#check for null values
df.isnull().sum()

"""# Exploratory data Analysis"""

sns.countplot(df['Class'])

df_temp = df.drop(columns=['Time','Amount','Class'],axis=1)
#create dist plots
fig,ax = plt.subplots(ncols=4, nrows=7, figsize=(20,50))
index = 0
ax = ax.flatten()
for col in df_temp.columns:
  sns.distplot(df_temp[col],ax = ax[index])
  index += 1
plt.tight_layout(pad=0.5,w_pad=0.5,h_pad=5)

sns.displot(df['Time'])

sns.displot(df['Amount'])

"""# Coorelation Matrix"""

corr = df.corr()
plt.figure(figsize=(30,40))
sns.heatmap(corr,annot = True ,cmap ='coolwarm')

"""## **Input Split**"""

X = df.drop(columns=['Class'], axis=1)
y = df['Class']

"""### **Standard Scaling**"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_scaler  =  sc.fit_transform(X)

x_scaler[-1]

"""## Model Training


"""

# train test split
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,f1_score
x_train, x_test, y_train, y_test = train_test_split(
    x_scaler, y, test_size=0.78, random_state=142,stratify = y
)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
# training
model.fit(x_train,y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test,y_pred))
print("F1 Score:",f1_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
# training
model.fit(x_train,y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test,y_pred))
print("F1 Score:",f1_score(y_test,y_pred))

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs = -1)
# training
model.fit(x_train,y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))

"""## **Class** **Imbalancement**"""

sns.countplot(y_train)

# hint -use combination of over sampling and under sampling
# balance the class with equal distribution
from imblearn.over_sampling import SMOTE
over_sample= SMOTE()
x_smote,y_smote = over_sample.fit_resample(x_train, y_train)

sns.countplot(y_smote)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
# training
model.fit(x_smote,y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test,y_pred))
print("F1 Score:",f1_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_jobs = -1)
# training
model.fit(x_smote,y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test,y_pred))
print("F1 Score:",f1_score(y_test,y_pred))

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs = -1)
# training
model.fit(x_smote,y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))